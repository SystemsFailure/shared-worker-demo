// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
const ports = new Set()

// –£—Ç–∏–ª–∏—Ç–∞ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
function broadcast(data, exceptPort = null) {
	for (const p of ports) {
		if (p !== exceptPort) {
			p.postMessage(data)
		}
	}
}

// eslint-disable-next-line no-undef
onconnect = (event) => {
	const port = event.ports[0]
	ports.add(port)

	// –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –≤–∫–ª–∞–¥–∫–µ id
	const clientId = Math.random().toString(36).slice(2, 8)

	port.start()
	port.postMessage({ type: 'hello', clientId, count: ports.size })

	broadcast({ type: 'system', text: `‚úÖ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è (${clientId}). –í—Å–µ–≥–æ: ${ports.size}` }, port)

	port.onmessage = (e) => {
		const msg = e.data

		// –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
		switch (msg?.type) {
			case 'chat':
				// –†–∞—Å—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–∫–ª–∞–¥–∫–∞–º
				broadcast({ type: 'chat', from: clientId, text: msg.text }, port)
				break

			case 'modal-open':
				// –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
				broadcast({ type: 'modal-open' })
				break

			case 'modal-close':
				// –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
				broadcast({ type: 'modal-close' })
				break

			case 'disconnect':
				// –Ø–≤–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, beforeunload)
				try { port.close() }
				catch {}
				ports.delete(port)
				broadcast({ type: 'system', text: `üëã –ö–ª–∏–µ–Ω—Ç –≤—ã—à–µ–ª (${clientId}). –û—Å—Ç–∞–ª–æ—Å—å: ${ports.size}` })
				break

			default:
				// —ç—Ö–æ –∏–ª–∏ –∏–≥–Ω–æ—Ä
				port.postMessage({ type: 'echo', received: msg })
				break
		}
	}

	port.onmessageerror = () => {
		// –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —á–∏—Å—Ç–∏–º –ø–æ—Ä—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
		ports.delete(port)
	}

	port.onclose = () => {
		ports.delete(port)
		broadcast({ type: 'system', text: `üîª –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (${clientId}). –û—Å—Ç–∞–ª–æ—Å—å: ${ports.size}` })
	}
}
